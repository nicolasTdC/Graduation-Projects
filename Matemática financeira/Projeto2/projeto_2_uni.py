# -*- coding: utf-8 -*-
"""Projeto_2_uni.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yRf30iVpTYxnxNKYuOqlD3-5_LuS6Tqk
"""

import numpy as np
from numpy import nan as NaN
import pandas as pd
from pandas import DataFrame
import matplotlib.pyplot as plt

#%%juros compostos diferentes taxas por periodo
def comp_dif_taxa(K,I,P): #K vetor com k periodos, I vetor com i de cada periodo, P capital 
    M = P
    lista = []#valores dos capitais
    lista2=[]#valores das taxas
    for k in range(len(K)):
        for n in range(1,K[k]+1):
            i=1+I[k]/100
            M=M*(i)
            lista.append(M)
            '''
            if len(lista2)==0:
                lista2.append(i)
            else:
                lista2.append(lista2[k-1]+i)
             '''
    for m in lista :
        lista2.append(m/P)
    return M,lista,lista2
#%%
def taxa_capital_igual(Ka,Kb,Ia,Ib,N):#Ib faltando a taxa final x
    taxa_cada_ano_A=[]
    taxa_cada_ano_B=[]
    count=0
    A=1
    B=1
    per_B=0
    for i in range(len(Ib)):
        per_B+=Kb[i]
    
    per_faltanteB=N - per_B
    
    for k in Ka:
        taxa_ano=[Ia[count]]
        taxa_periodo=taxa_ano*k
        taxa_cada_ano_A.append(taxa_periodo)
        count+=1
    
    count=0
    for k in range(len(Kb)-1):
        taxa_ano=[Ib[count]]
        taxa_periodo= taxa_ano*Kb[k]
        taxa_cada_ano_B.append(taxa_periodo)
        count+=1
        
    taxa_cada_ano_A,taxa_cada_ano_B=np.hstack(taxa_cada_ano_A),np.hstack(taxa_cada_ano_B)
    
    for i in taxa_cada_ano_B:
        B=B*(1+i/100)
       
    for n in range(N):
        A=A*(1+taxa_cada_ano_A[n]/100)
    
    x=100*(A/B)**(1/per_faltanteB)-100

    return x

#%%
def TIR(fluxo):
    q=[]
    coef = fluxo
    coef=np.flip(coef)
    p=np.roots(coef)
    for j in p:
        q.append(1/j)
    cadidatos_q=[]
    for i in q:
        if i.imag==0:
            cadidatos_q.append(i)
    for i in cadidatos_q:
        if ( (i-1) >= -1) and ((i-1) <= 1):
           return i -1
#%%
def flux(fluxos,periodos,C):
    fluxo=[-C]
    for k in range(len(periodos)):
        for n in range(1,periodos[k]+1):
            fluxo.append(fluxos[k])
    return fluxo
#%%
def fluxo_capital_igual(fluxoA,periodosB,fluxosB,C):#fluxosB faltando o fluxo final C/x
    rendaA=sum(fluxoA)+C
    fluxoB_=flux(fluxosB,periodosB[:-1],C)
    rendaB_=sum(fluxoB_)+C
    
    renda_dif= rendaA-rendaB_
    
    renda_por_periodo=renda_dif/periodosB[-1]
    x=C/renda_por_periodo

    return x

#%% Questao Original
if __name__ == "__main__":
    print("QUESTAO 1\n")
    print('-------------\n')
#%%dados
    Ka,Ia,Kb,Ib=[5,5,10],[5,6,7],[10,10],[6]
    N=15
    C=100000
    #%%1.1
    x=taxa_capital_igual(Ka,Kb,Ia,Ib,N)
    print("Questão 1.1\n")
    print("x=",x,'\n')
    print('-------------\n')
    
    Ib.append(x)
    #%%1.2
    Ap1,Ap2=comp_dif_taxa(Ka,Ia,C),comp_dif_taxa(Kb,Ib,C)
    M1=Ap1[0]
    M2=Ap2[0]
    print("Questão 1.2\n")
    print("Montante 1:",M1,"\nMontante 2:",M2,'\n')
    print('-------------\n')
    #%%1.3
    cap1,cap2=Ap1[1],Ap2[1]
    jur1,jur2=Ap1[2],Ap2[2]
    jur1_,jur2_=[],[]
    for i in range(len(jur1)):
        jur1_.append(jur1[i]*100)
        jur2_.append(jur2[i]*100)
    index=[]
    for i in range(20):
        index.append("Ano "+str(i+1))
    df = pd.DataFrame({'Juros 1 (%)':jur1_,'Capital 1':cap1, 'Juros 2 (%)':jur2_,'Capital 2':cap2},index=index)
    print("Questão 1.3\n")
    print(df)
    print('-------------\n')
    #%%1.4
    t=np.linspace(1,20,20)
    plt.scatter(t,cap1)
    plt.scatter(t,cap2)
    plt.plot(t,cap1,label='Aplicação A')
    plt.plot(t,cap2,label='Aplicação B')
    plt.legend()
    plt.title('Capital ($Reais) x Ano')
    plt.xlabel('Ano'), plt.ylabel('Capital ($Reais)')
    plt.show()
#%%

#%% Questao criada
if __name__ == "__main__":
    print("QUESTAO 1 - Criada\n")
    print('-------------\n')
#%%dados
    Ka,Ia,Kb,Ib=[20,10,10],[10,12,14],[20,20],[12]
    N=32
    C=10000
    #%%1.1
    x=taxa_capital_igual(Ka,Kb,Ia,Ib,N)
    print("Questão 1.1 - Criada\n")
    print("x=",x,'\n')
    print('-------------\n')
    
    Ib.append(x)
    #%%1.2
    Ap1,Ap2=comp_dif_taxa(Ka,Ia,C),comp_dif_taxa(Kb,Ib,C)
    M1=Ap1[0]
    M2=Ap2[0]
    print("Questão 1.2 - Criada\n")
    print("Montante 1:",M1,"\nMontante 2:",M2,'\n')
    print('-------------\n')
    #%%1.3
    cap1,cap2=Ap1[1],Ap2[1]
    jur1,jur2=Ap1[2],Ap2[2]
    jur1_,jur2_=[],[]
    for i in range(len(jur1)):
        jur1_.append(jur1[i]*100)
        jur2_.append(jur2[i]*100)
    index=[]
    for i in range(40):
        index.append("Ano "+str(i+1))
    df = pd.DataFrame({'Juros 1 (%)':jur1_,'Capital 1':cap1, 'Juros 2 (%)':jur2_,'Capital 2':cap2},index=index)
    print("Questão 1.3 - Criada\n")
    print(df)
    print('-------------\n')
    #%%1.4
    t=np.linspace(1,40,40)
    plt.scatter(t,cap1)
    plt.scatter(t,cap2)
    plt.plot(t,cap1,label='Aplicação A')
    plt.plot(t,cap2,label='Aplicação B')
    plt.legend()
    plt.title('Capital ($Reais) x Ano')
    plt.xlabel('Ano'), plt.ylabel('Capital ($Reais)')
    plt.show()
    #%%

#%%
    print("QUESTAO 2\n")
    print('-------------\n')
    #%%
    C=10000
    fluxosA = [C/10, C/5]
    periodosA =[5,5]
    fluxoA=flux(fluxosA,periodosA,C)

    fluxosB = [C/10, C/5]
    periodosB =[6,3,1]
    #%%2.1
    x= fluxo_capital_igual(fluxoA,periodosB,fluxosB,C)
    print("Questão 2.1\n")
    print("x=",x,'\n')
    print('-------------\n')
    fluxosB.append(C/x)
    #%%2.2
    fluxoB=flux(fluxosB,periodosB,C)
    
    TIR_A,TIR_B=TIR(fluxoA),TIR(fluxoB)
    
    print("Questão 2.2\n")
    print(" TIR A:",TIR_A.real,'\n',"TIR B:",TIR_B.real,'\n')
    print('-------------\n')
        
    #%%2.3
    fluxosB = [C/10, C/5]
    periodosB =[6,3,1]
    periodosC,fluxosC=[9,1],[0, 2*C] #aplicacao criada artificialemnte com renda final 2C para usar na funcao que compara aplicacoes
    fluxoC=flux(fluxosC,periodosC,C)

    x= fluxo_capital_igual(fluxoC,periodosB,fluxosB,C)
    
    fluxosB.append(C/x)

    fluxoB=flux(fluxosB,periodosB,C)

    print("Questão 2.3\n")
    print("x=",x,'\n')
    print('-------------\n')
    #%%2.4

    print("Questão 2.4\n")
    print(" TIR:",(TIR(fluxoB)).real,'\n')
    print('-------------\n')

    print("QUESTAO 2 - Criada\n")
    print('-------------\n')
    #%%
    C=10000
    fluxosA = [C/20, C/10]
    periodosA =[10, 10]
    fluxoA=flux(fluxosA,periodosA,C)

    fluxosB = [C/20, C/15]
    periodosB =[10, 9, 1]
    #%%2.1
    x= fluxo_capital_igual(fluxoA,periodosB,fluxosB,C)
    print("Questão 2.1 - Criada\n")
    print("x=",x,'\n')
    print('-------------\n')
    fluxosB.append(C/x)
    #%%2.2
    fluxoB=flux(fluxosB,periodosB,C)
    
    TIR_A,TIR_B=TIR(fluxoA),TIR(fluxoB)
    
    print("Questão 2.2 - Criada\n")
    print(" TIR A:",TIR_A.real,'\n',"TIR B:",TIR_B.real,'\n')
    print('-------------\n')
        
    #%%2.3
    fluxosB = [C/20, C/15]
    periodosB =[10, 9, 1]
    periodosC,fluxosC=[19,1],[0, 4*C] #aplicacao criada artificialmente com renda final 2C para usar na funcao que compara aplicacoes
    fluxoC=flux(fluxosC,periodosC,C)

    x= fluxo_capital_igual(fluxoC,periodosB,fluxosB,C)
    
    fluxosB.append(C/x)

    fluxoB=flux(fluxosB,periodosB,C)

    print("Questão 2.3 - Criada\n")
    print("x=",x,'\n')
    print('-------------\n')
    #%%2.4

    print("Questão 2.4 - Criada\n")
    print(" TIR:",(TIR(fluxoB)).real,'\n')
    print('-------------\n')
    
#%%
def amortização_it(divida, num_parcelas, juros, parcela_especial=None):
    '''Retorna uma tabela de amortização italiana na forma de uma DataFrame pandas

    divida: divida total em reais
    num_parcelas: número total de parcelas
    juros: lista dos juros para cada parcela em porcentagem; ou um único valor para juros iguais em todas as parcelas
    parcela_especial: tupla (i,v) em que v é o valor a ser pago na i-ésima parcela. A ser usado para devoluções antecipadas e parcelas puladas'''

    if (type(juros) is not list):
        juros = [juros] * num_parcelas

    if parcela_especial == None:
        parcela_especial = (num_parcelas + 1, 0)
    
    k_esp, R_esp = parcela_especial
    C = divida / num_parcelas
    
    tabela = DataFrame({
        "i": [NaN] + juros,
        "R": [NaN] * (num_parcelas + 1),
        "I": [NaN] * (num_parcelas + 1),
        "C": [NaN] + ([C] * (k_esp - 1)) + ([NaN] * (num_parcelas - k_esp + 1)),
        "D": [divida - i*C for i in range(0, k_esp)] + ([NaN] * (num_parcelas - k_esp + 1))
    })

    for k in range(1, k_esp):
        tabela['I'][k] = tabela["i"][k]/100 * tabela["D"][k-1]
        tabela['R'][k] = tabela["C"][k] + tabela["I"][k]

    if k_esp > num_parcelas:
        tabela["E"] = divida - tabela["D"]
        return tabela.applymap(lambda x: round(x, 2))

    tabela["R"][k_esp] = R_esp
    tabela["I"][k_esp] = tabela["i"][k_esp]/100 * tabela["D"][k_esp - 1]
    tabela["C"][k_esp] = tabela["R"][k_esp]     - tabela["I"][k_esp]
    tabela["D"][k_esp] = tabela["D"][k_esp - 1] - tabela["C"][k_esp]

    C = tabela["D"][k_esp]/(num_parcelas - k_esp)
    for k in range(k_esp + 1, num_parcelas + 1):
        tabela["C"][k] = C
        tabela["I"][k] = tabela["i"][k]/100 * tabela["D"][k-1]
        tabela["R"][k] = tabela["I"][k]   + C
        tabela["D"][k] = tabela["D"][k-1] - C
    
    tabela["E"] = divida - tabela["D"]
    return tabela.applymap(lambda x: round(x, 2))


def amortização_fr(divida, num_parcelas, juros, parcela_especial=None):
    '''Retorna uma tabela de amortização francesa na forma de um DataFrame Pandas

    divida: divida total em reais
    num_parcelas: número total de parcelas
    juros: valor da taxa de juros de todas as parcelas (não suporta juros variáveis)
    parcela_especial: tupla (i,v) em que v é o valor a ser pago na i-ésima parcela. A ser usado para devoluções antecipadas e parcelas puladas'''
    
    if parcela_especial == None:
        parcela_especial = (num_parcelas + 1, 0)
    
    k_esp, R_esp = parcela_especial

    i = juros / 100
    R = divida * (i*((1+i)**num_parcelas))/(((1+i)**num_parcelas) - 1)

    tabela = DataFrame({
        "i": [NaN] + [juros] * num_parcelas,
        "R": [NaN] + ([R] * (k_esp - 1)) + ([NaN] * (num_parcelas - k_esp + 1)),
        "I": [NaN] * (num_parcelas + 1),
        "C": [NaN] * (num_parcelas + 1),
        "D": [divida] + [NaN] * num_parcelas
    })

    for k in range(1, k_esp):
        tabela["I"][k] = i * tabela["D"][k-1]
        tabela["C"][k] = R - tabela["I"][k]
        tabela["D"][k] = tabela["D"][k-1] - tabela["C"][k]
    
    if k_esp > num_parcelas:
        tabela["E"] = divida - tabela["D"]
        return tabela.applymap(lambda x: round(x, 2))
        

    tabela["R"][k_esp] = R_esp
    tabela["I"][k_esp] = i * tabela["D"][k_esp - 1]
    tabela["C"][k_esp] = R_esp - tabela["I"][k_esp]
    tabela["D"][k_esp] = tabela["D"][k_esp - 1] - tabela["C"][k_esp]

    R = tabela["D"][k_esp] * (i*((1+i)**(num_parcelas - k_esp)))/(((1+i)**(num_parcelas - k_esp)) - 1)

    for k in range(k_esp + 1, num_parcelas + 1):
        tabela["R"][k] = R
        tabela["I"][k] = i * tabela["D"][k-1]
        tabela["C"][k] = R - tabela["I"][k]
        tabela["D"][k] = tabela["D"][k-1] - tabela["C"][k]

    
    tabela["E"] = divida - tabela["D"]

    return tabela.applymap(lambda x: round(x, 2))

if __name__ == "__main__":

    # Exercício 3 -- questão dada
    t1 = amortização_it(100_000, 10, 5)
    t2 = amortização_it(100_000, 10, 5, (5, 0))
    t3 = amortização_it(100_000, 10, 5, (5, 25_000))

    print("QUESTAO 3\n Note que o item 3.4 esta incluso ao final de cada situacao.")
    print('-------------\n')
    print("QUESTAO 3.1\n")
    print(f"{t1}\n\nTotal a pagar = {t1.R.sum()}\n")
    print('-------------\n')
    print("QUESTAO 3.2\n")
    print(f"{t2}\n\nTotal a pagar = {t2.R.sum()}\n")
    print('-------------\n')
    print("QUESTAO 3.3\n")
    print(f"{t3}\n\nTotal a pagar = {t3.R.sum()}\n")
    print('-------------\n')

    # TODO: Exercício 3 -- questão criada
    t1 = amortização_it(10_000, 5, 10)
    t2 = amortização_it(10_000, 5, 10, (2, 0))
    t3 = amortização_it(10_000, 5, 10, (3, 5_200))

    print("QUESTAO 3 - Criada\n Note que o item 3.4* esta incluso ao final de cada situacao.")
    print('-------------\n')
    print("QUESTAO 3.1 - Criada\n")
    print(f"{t1}\n\nTotal a pagar = {t1.R.sum()}\n")
    print('-------------\n')
    print("QUESTAO 3.2 - Criada\n")
    print(f"{t2}\n\nTotal a pagar = {t2.R.sum()}\n")
    print('-------------\n')
    print("QUESTAO 3.3 - Criada\n")
    print(f"{t3}\n\nTotal a pagar = {t3.R.sum()}\n")
    print('-------------\n')

    # Exercício 4 -- questão dada
    t1 = amortização_fr(100_000, 10, 5)
    t2 = amortização_fr(100_000, 10, 5, (5, 0))
    t3 = amortização_fr(100_000, 10, 5, (5, 25_920.92))

    print("QUESTAO 4\n Note que o item 4.4 esta incluso ao final de cada situacao.")
    print('-------------\n')
    print("QUESTAO 4.1\n")
    print(f"{t1}\n\nTotal a pagar = {t1.R.sum()}\n")
    print('-------------\n')
    print("QUESTAO 4.2\n")
    print(f"{t2}\n\nTotal a pagar = {t2.R.sum()}\n")
    print('-------------\n')
    print("QUESTAO 4.3\n")
    print(f"{t3}\n\nTotal a pagar = {t3.R.sum()}\n")
    print('-------------\n')

    # TODO: Exercício 4 -- questão criada
    t1 = amortização_fr(10_000, 5, 10)
    t2 = amortização_fr(10_000, 5, 10, (2, 0))
    t3 = amortização_fr(10_000, 5, 10, (2, 5_275.94))

    print("QUESTAO 4 - Criada\n Note que o item 4.4* esta incluso ao final de cada situacao.\n")
    print('-------------\n')
    print("QUESTAO 4.1 - Criada\n")
    print(f"{t1}\n\nTotal a pagar = {t1.R.sum()}\n")
    print('-------------\n')
    print("QUESTAO 4.2 - Criada\n")
    print(f"{t2}\n\nTotal a pagar = {t2.R.sum()}\n")
    print('-------------\n')
    print("QUESTAO 4.3 - Criada\n")
    print(f"{t3}\n\nTotal a pagar = {t3.R.sum()}\n")
    print('-------------\n')

